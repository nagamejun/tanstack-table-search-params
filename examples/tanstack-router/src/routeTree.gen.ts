/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PushImport } from './routes/push'
import { Route as DebounceImport } from './routes/debounce'
import { Route as CustomParamNameImport } from './routes/custom-param-name'
import { Route as CustomEncoderDecoderImport } from './routes/custom-encoder-decoder'
import { Route as CustomDefaultValueImport } from './routes/custom-default-value'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PushRoute = PushImport.update({
  id: '/push',
  path: '/push',
  getParentRoute: () => rootRoute,
} as any)

const DebounceRoute = DebounceImport.update({
  id: '/debounce',
  path: '/debounce',
  getParentRoute: () => rootRoute,
} as any)

const CustomParamNameRoute = CustomParamNameImport.update({
  id: '/custom-param-name',
  path: '/custom-param-name',
  getParentRoute: () => rootRoute,
} as any)

const CustomEncoderDecoderRoute = CustomEncoderDecoderImport.update({
  id: '/custom-encoder-decoder',
  path: '/custom-encoder-decoder',
  getParentRoute: () => rootRoute,
} as any)

const CustomDefaultValueRoute = CustomDefaultValueImport.update({
  id: '/custom-default-value',
  path: '/custom-default-value',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/custom-default-value': {
      id: '/custom-default-value'
      path: '/custom-default-value'
      fullPath: '/custom-default-value'
      preLoaderRoute: typeof CustomDefaultValueImport
      parentRoute: typeof rootRoute
    }
    '/custom-encoder-decoder': {
      id: '/custom-encoder-decoder'
      path: '/custom-encoder-decoder'
      fullPath: '/custom-encoder-decoder'
      preLoaderRoute: typeof CustomEncoderDecoderImport
      parentRoute: typeof rootRoute
    }
    '/custom-param-name': {
      id: '/custom-param-name'
      path: '/custom-param-name'
      fullPath: '/custom-param-name'
      preLoaderRoute: typeof CustomParamNameImport
      parentRoute: typeof rootRoute
    }
    '/debounce': {
      id: '/debounce'
      path: '/debounce'
      fullPath: '/debounce'
      preLoaderRoute: typeof DebounceImport
      parentRoute: typeof rootRoute
    }
    '/push': {
      id: '/push'
      path: '/push'
      fullPath: '/push'
      preLoaderRoute: typeof PushImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/custom-default-value': typeof CustomDefaultValueRoute
  '/custom-encoder-decoder': typeof CustomEncoderDecoderRoute
  '/custom-param-name': typeof CustomParamNameRoute
  '/debounce': typeof DebounceRoute
  '/push': typeof PushRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/custom-default-value': typeof CustomDefaultValueRoute
  '/custom-encoder-decoder': typeof CustomEncoderDecoderRoute
  '/custom-param-name': typeof CustomParamNameRoute
  '/debounce': typeof DebounceRoute
  '/push': typeof PushRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/custom-default-value': typeof CustomDefaultValueRoute
  '/custom-encoder-decoder': typeof CustomEncoderDecoderRoute
  '/custom-param-name': typeof CustomParamNameRoute
  '/debounce': typeof DebounceRoute
  '/push': typeof PushRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/custom-default-value'
    | '/custom-encoder-decoder'
    | '/custom-param-name'
    | '/debounce'
    | '/push'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/custom-default-value'
    | '/custom-encoder-decoder'
    | '/custom-param-name'
    | '/debounce'
    | '/push'
  id:
    | '__root__'
    | '/'
    | '/custom-default-value'
    | '/custom-encoder-decoder'
    | '/custom-param-name'
    | '/debounce'
    | '/push'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomDefaultValueRoute: typeof CustomDefaultValueRoute
  CustomEncoderDecoderRoute: typeof CustomEncoderDecoderRoute
  CustomParamNameRoute: typeof CustomParamNameRoute
  DebounceRoute: typeof DebounceRoute
  PushRoute: typeof PushRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomDefaultValueRoute: CustomDefaultValueRoute,
  CustomEncoderDecoderRoute: CustomEncoderDecoderRoute,
  CustomParamNameRoute: CustomParamNameRoute,
  DebounceRoute: DebounceRoute,
  PushRoute: PushRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/custom-default-value",
        "/custom-encoder-decoder",
        "/custom-param-name",
        "/debounce",
        "/push"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/custom-default-value": {
      "filePath": "custom-default-value.tsx"
    },
    "/custom-encoder-decoder": {
      "filePath": "custom-encoder-decoder.tsx"
    },
    "/custom-param-name": {
      "filePath": "custom-param-name.tsx"
    },
    "/debounce": {
      "filePath": "debounce.tsx"
    },
    "/push": {
      "filePath": "push.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
